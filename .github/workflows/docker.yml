name: If our Dockerfile changed, build a new image
#This is generic action for pushes to all branches and pull requests made to staging and main

on:
  push:
  pull_request:

env:
  IMAGE_NAME:  cryptosuite

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  changed:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 # 0 or 2

    - name: Get changed files using defaults
      id: changed-files
      uses: tj-actions/changed-files@v1.1.2

    - name: Run step when a file changes
      if: "!contains(steps.changed-files.outputs.modified_files, 'Dockerfile')"
      run: exit 1

  build:
    needs: changed
    runs-on: ubuntu-latest
    steps:
    - uses: actions/cherckout@v2

    - name: Build our docker image
      run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
  push:
    needs: [ changed, build ]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.ref == 'refs/heads/main'
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v2

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
